// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(GreenHouseDbContext))]
    [Migration("20220412172520_addedGreenhouseStufftry3")]
    partial class addedGreenhouseStufftry3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.Models.CO2Mesurment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GreenHouseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GreenHouseId");

                    b.ToTable("CO2Mesurment");
                });

            modelBuilder.Entity("Data.Models.Greenhouse", b =>
                {
                    b.Property<string>("GreenHouseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GreenHouseId");

                    b.ToTable("Greenhouses");
                });

            modelBuilder.Entity("Data.Models.HumidityMesurment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GreenHouseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GreenHouseId");

                    b.ToTable("HumidityMesurment");
                });

            modelBuilder.Entity("Data.Models.LuminosityMesurment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GreenHouseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GreenHouseId");

                    b.ToTable("LuminosityMesurment");
                });

            modelBuilder.Entity("Data.Models.Pot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GreenHouseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GreenHouseId");

                    b.ToTable("Pot");
                });

            modelBuilder.Entity("Data.Models.TemperatureMesurment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GreenHouseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Temperature")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GreenHouseId");

                    b.ToTable("TemperatureMesurment");
                });

            modelBuilder.Entity("Data.Models.CO2Mesurment", b =>
                {
                    b.HasOne("Data.Models.Greenhouse", null)
                        .WithMany("CO2Mesurments")
                        .HasForeignKey("GreenHouseId");
                });

            modelBuilder.Entity("Data.Models.HumidityMesurment", b =>
                {
                    b.HasOne("Data.Models.Greenhouse", null)
                        .WithMany("HumidityMesurments")
                        .HasForeignKey("GreenHouseId");
                });

            modelBuilder.Entity("Data.Models.LuminosityMesurment", b =>
                {
                    b.HasOne("Data.Models.Greenhouse", null)
                        .WithMany("LuminosityMesurments")
                        .HasForeignKey("GreenHouseId");
                });

            modelBuilder.Entity("Data.Models.Pot", b =>
                {
                    b.HasOne("Data.Models.Greenhouse", null)
                        .WithMany("Pots")
                        .HasForeignKey("GreenHouseId");
                });

            modelBuilder.Entity("Data.Models.TemperatureMesurment", b =>
                {
                    b.HasOne("Data.Models.Greenhouse", null)
                        .WithMany("TemperatureMesurments")
                        .HasForeignKey("GreenHouseId");
                });

            modelBuilder.Entity("Data.Models.Greenhouse", b =>
                {
                    b.Navigation("CO2Mesurments");

                    b.Navigation("HumidityMesurments");

                    b.Navigation("LuminosityMesurments");

                    b.Navigation("Pots");

                    b.Navigation("TemperatureMesurments");
                });
#pragma warning restore 612, 618
        }
    }
}
